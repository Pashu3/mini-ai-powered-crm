// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}
model PasswordReset {
  id        String   @id @default(uuid()) @map("_id")
  email     String
  token     String   @unique
  createdAt DateTime @default(now())
  expiresAt DateTime
}
model User {
  id             String           @id @default(uuid()) @map("_id")
  email          String           @unique
  name           String
  password       String
  role           UserRole         @default(USER)
  leads          Lead[]
  notifications  Notification[]
  campaigns      Campaign[]       // User can own campaigns
  templates      MessageTemplate[] // User can create templates
  preferences    Json?            // Store user preferences (theme, notifications settings)
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
}

model Lead {
  id            String         @id @default(uuid()) @map("_id")
  name          String
  email         String?
  phone         String?
  linkedinUrl   String?
  company       String?
  position      String?
  notes         String?
  stage         LeadStage      @default(NEW)
  tags          String[]
  score         Int?           // Lead scoring based on engagement
  userId        String?
  user          User?          @relation(fields: [userId], references: [id])
  campaignId    String?
  campaign      Campaign?      @relation(fields: [campaignId], references: [id])
  lastActivity  DateTime?
  lastContactedDate DateTime?
  nextContactDate  DateTime?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  conversations Conversation[]
  suggestions   AiSuggestion[]
  tasks         Task[]
}

model Conversation {
  id           String           @id @default(uuid()) @map("_id")
  leadId       String
  lead         Lead             @relation(fields: [leadId], references: [id], onDelete: Cascade)
  type         ConversationType
  content      String
  subject      String?          // Subject line for emails
  attachment   String?          // URL to any attachment
  sentiment    String?          // AI-analyzed sentiment
  date         DateTime         @default(now())
  followUp     DateTime?
  hasFollowUp  Boolean          @default(false)
  followUpDone Boolean          @default(false)
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
}

model AiSuggestion {
  id         String            @id @default(uuid()) @map("_id")
  leadId     String
  lead       Lead              @relation(fields: [leadId], references: [id], onDelete: Cascade)
  suggestion String
  type       String
  status     SuggestionStatus  @default(NEW)
  priority   Int               @default(1)
  done       Boolean           @default(false)
  isViewed   Boolean           @default(false)  // Track if user has seen the suggestion
  reasoning  String?           // Why AI made this suggestion
  templateId String?           // Link to suggested template if applicable
  template   MessageTemplate?  @relation(fields: [templateId], references: [id])
  createdAt  DateTime          @default(now())
  updatedAt  DateTime          @updatedAt
}

model Campaign {
  id          String         @id @default(uuid()) @map("_id")
  name        String
  description String?
  steps       CampaignStep[]
  leads       Lead[]         // Leads in this campaign
  isActive    Boolean        @default(true)
  userId      String?        // Campaign owner
  user        User?          @relation(fields: [userId], references: [id])
  stats       Json?          // Campaign performance stats
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
}

model CampaignStep {
  id            String           @id @default(uuid()) @map("_id")
  campaignId    String
  campaign      Campaign         @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  type          StepType
  content       String?
  templateId    String?          // Reference to message template
  template      MessageTemplate? @relation(fields: [templateId], references: [id])
  waitDays      Int              @default(0)
  order         Int
  conditions    Json?            // Step execution conditions
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
}

model MessageTemplate {
  id           String           @id @default(uuid()) @map("_id")
  name         String
  content      String
  subject      String?          // For email templates
  type         TemplateType
  tags         String[]
  userId       String?          // Template owner
  user         User?            @relation(fields: [userId], references: [id])
  aiGenerated  Boolean          @default(false)
  suggestions  AiSuggestion[]   // Suggestions using this template
  campaignSteps CampaignStep[]  // Campaign steps using this template
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
}

model DashboardMetric {
  id          String   @id @default(uuid()) @map("_id")
  name        String
  value       Json
  periodStart DateTime
  periodEnd   DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Task {
  id          String     @id @default(uuid()) @map("_id")
  title       String
  description String?
  dueDate     DateTime?
  priority    Int        @default(2) // 1-4 priority scale
  status      TaskStatus @default(PENDING)
  leadId      String?    // Optional relation to Lead
  lead        Lead?      @relation(fields: [leadId], references: [id])
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model Notification {
  id          String           @id @default(uuid()) @map("_id")
  userId      String
  user        User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  title       String
  message     String
  type        NotificationType
  isRead      Boolean          @default(false)
  relatedId   String?          // ID of related entity (lead, task, etc.)
  relatedType String?          // Type of related entity
  createdAt   DateTime         @default(now())
}

model ExportJob {
  id          String      @id @default(uuid()) @map("_id") 
  userId      String
  type        ExportType
  filters     Json?       // Search/filter criteria for export
  status      JobStatus   @default(PENDING)
  url         String?     // Download URL when complete
  createdAt   DateTime    @default(now())
  completedAt DateTime?
}

enum UserRole {
  ADMIN
  USER
}

enum LeadStage {
  NEW
  CONTACTED
  ENGAGED
  QUALIFIED
  PROPOSAL
  NEGOTIATION
  CONVERTED
  LOST
}

enum ConversationType {
  EMAIL
  CALL
  MEETING
  LINKEDIN
    NOTE
  
  OTHER
}

enum SuggestionStatus {
  NEW
  ACCEPTED
  REJECTED
  COMPLETED
}

enum StepType {
  EMAIL
  CALL
  LINKEDIN_MESSAGE
  WAIT
  TASK
}

enum TemplateType {
  COLD_OUTREACH
  FOLLOW_UP
  PROPOSAL
  MEETING_REQUEST
  OTHER
}

enum TaskStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum NotificationType {
  FOLLOW_UP
  TASK_DUE
  AI_SUGGESTION
  CAMPAIGN_ALERT
  SYSTEM
}

enum ExportType {
  LEADS
  CONVERSATIONS
  CAMPAIGN_DATA
  ALL_DATA
}

enum JobStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
}